import { Store } from '.';
export declare enum AiChatMessageRole {
    user = "user",
    assistant = "assistant",
    function = "function",
    system = "system",
    tool = "tool"
}
export interface AiChatFnCall {
    name: string;
    arguments: string;
}
export interface ChatMessage {
    id: string;
    content: string;
    role: AiChatMessageRole;
    createdAt: string;
    error?: string;
    isStreaming?: boolean;
    functionCall?: AiChatFnCall;
}
export declare const createMsgId: () => string;
export declare class ChatsStore {
    store: Store;
    INITIAL_MESSAGE: ChatMessage;
    messages: ChatMessage[] | undefined;
    constructor(store: Store);
    addMessage(message: Partial<ChatMessage> & Pick<ChatMessage, 'role' | 'content'>): {
        id: string;
        content: string;
        role: AiChatMessageRole;
        createdAt: string;
        error?: string | undefined;
        isStreaming?: boolean | undefined;
        functionCall?: AiChatFnCall | undefined;
    };
    setMessages(cb: (messages: ChatMessage[]) => ChatMessage[]): ChatMessage[];
    updateMessage(id: string, update: (message: ChatMessage) => ChatMessage): ChatMessage[];
    removeMessage(id: string): ChatMessage[];
}
export declare const useChatsStore: () => ChatsStore;
