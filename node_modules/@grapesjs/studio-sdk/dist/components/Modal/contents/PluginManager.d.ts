/// <reference types="react" />
import { InstallablePlugin, StorablePluginProps } from '../../../utils/types';
import { WithEditorProps } from '../../../types';
export declare const availablePlugins: InstallablePlugin[];
export interface PluginCardProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onSelect'> {
    plugin: InstallablePlugin;
    installed: InstalledMap;
    onInstall: (plugin: InstallablePlugin) => void;
    onSelect?: (plugin: InstallablePlugin) => void;
    onRemove?: (plugin: InstallablePlugin) => void;
}
type InstalledMap = Record<string, string | undefined>;
export declare const PluginCard: import("react").FunctionComponent<PluginCardProps>;
export interface PluginManagerProps {
    selectedId?: string;
    loadPlugins?: (props: Partial<WithEditorProps>) => InstallablePlugin[] | Promise<InstallablePlugin[]>;
    loadPluginsInstalled?: (props: Partial<WithEditorProps>) => StorablePluginProps[] | Promise<StorablePluginProps[]>;
    onInstall?: (plugin: InstallablePlugin, props: Partial<WithEditorProps>) => void | Promise<void>;
    onUninstall?: (plugin: InstallablePlugin, props: Partial<WithEditorProps>) => void | Promise<void>;
}
declare const _default: import("react").FunctionComponent<PluginManagerProps>;
export default _default;
