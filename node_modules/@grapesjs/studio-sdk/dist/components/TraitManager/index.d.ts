/// <reference types="react" />
import { TraitsResultProps } from '@grapesjs/react';
import type { Editor, Trait } from 'grapesjs';
import { ButtonGroupFieldProps } from '../ButtonGroupField';
import { CodeFieldProps } from '../CodeField';
import { NumberFieldProps } from '../NumberField';
import { SelectFieldProps } from '../SelectField';
import { TraitManagerDataConfig } from '../../types';
interface GetTraitPropsOpts {
    traitManagerDataConfig: TraitManagerDataConfig;
}
export declare const getCommonProps: (trait: Trait) => {
    size: "s";
    tip: any;
};
export declare const getInputProps: (trait: Trait, editor?: Editor) => {
    type: string;
    value: any;
    label: string | false;
    placeholder: any;
    onChange: (value: string, partial: boolean) => void;
    size: "s";
    tip: any;
};
export declare const getSelectProps: (trait: Trait, opts: GetTraitPropsOpts) => SelectFieldProps;
export declare const getButtonsProps: (trait: Trait, opts: GetTraitPropsOpts) => ButtonGroupFieldProps;
export declare const getNumberProps: (trait: any, opts: GetTraitPropsOpts) => NumberFieldProps;
export declare const getButtonProps: (trait: Trait) => {
    children: string;
    onClick: () => void;
    full: boolean;
};
export declare const getCheckboxProps: (trait: Trait) => {
    value: boolean;
    label: string;
    onChange: (value: boolean) => void;
    size: "s";
    tip: any;
};
export declare const getCodeProps: (trait: Trait) => CodeFieldProps;
export declare const getFileProps: (trait: Trait, editor?: Editor) => any;
declare function TraitManager({ traits, className }: TraitsResultProps & React.HTMLProps<HTMLDivElement>): import("react/jsx-runtime").JSX.Element;
declare const _default: typeof TraitManager & {
    displayName: string;
};
export default _default;
